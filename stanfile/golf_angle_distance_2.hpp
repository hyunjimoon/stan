
// Code generated by stanc v2.22.1
#include <stan/model/model_header.hpp>
namespace golf_angle_distance_2_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 15, column 2 to column 28)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 16, column 2 to column 31)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 27, column 2 to column 48)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 19, column 2 to column 63)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 20, column 2 to line 21, column 68)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 22, column 2 to column 38)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 23, column 2 to column 21)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 24, column 2 to column 47)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 2, column 2 to column 8)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 3, column 2 to column 11)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 4, column 2 to column 14)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 5, column 2 to column 11)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 6, column 2 to column 9)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 7, column 2 to column 9)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 8, column 2 to column 16)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 9, column 2 to column 26)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/stan/stanfile/golf_angle_distance_2.stan', line 12, column 2 to column 47)"};


class golf_angle_distance_2_model : public model_base_crtp<golf_angle_distance_2_model> {

 private:
  int pos__;
  int J;
  std::vector<int> n;
  Eigen::Matrix<double, -1, 1> x;
  std::vector<int> y;
  double r;
  double R;
  double overshot;
  double distance_tolerance;
  Eigen::Matrix<double, -1, 1> threshold_angle;
 
 public:
  ~golf_angle_distance_2_model() { }
  
  std::string model_name() const { return "golf_angle_distance_2_model"; }
  
  golf_angle_distance_2_model(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "golf_angle_distance_2_model_namespace::golf_angle_distance_2_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      
      current_statement__ = 9;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 10;
      validate_non_negative_index("n", "J", J);
      context__.validate_dims("data initialization","n","int",
          context__.to_vec(J));
      n = std::vector<int>(J, 0);
      
      current_statement__ = 10;
      assign(n, nil_index_list(), context__.vals_i("n"),
        "assigning variable n");
      current_statement__ = 11;
      validate_non_negative_index("x", "J", J);
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(J));
      x = Eigen::Matrix<double, -1, 1>(J);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 11;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 11;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 12;
      validate_non_negative_index("y", "J", J);
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(J));
      y = std::vector<int>(J, 0);
      
      current_statement__ = 12;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      context__.validate_dims("data initialization","r","double",
          context__.to_vec());
      
      current_statement__ = 13;
      r = context__.vals_r("r")[(1 - 1)];
      context__.validate_dims("data initialization","R","double",
          context__.to_vec());
      
      current_statement__ = 14;
      R = context__.vals_r("R")[(1 - 1)];
      context__.validate_dims("data initialization","overshot","double",
          context__.to_vec());
      
      current_statement__ = 15;
      overshot = context__.vals_r("overshot")[(1 - 1)];
      context__.validate_dims("data initialization","distance_tolerance",
          "double",context__.to_vec());
      
      current_statement__ = 16;
      distance_tolerance = context__.vals_r("distance_tolerance")[(1 - 1)];
      current_statement__ = 17;
      validate_non_negative_index("threshold_angle", "J", J);
      threshold_angle = Eigen::Matrix<double, -1, 1>(J);
      
      current_statement__ = 17;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 17;
        assign(threshold_angle,
          cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable threshold_angle");}
      current_statement__ = 17;
      assign(threshold_angle, nil_index_list(),
        stan::math::asin(elt_divide((R - r), x)),
        "assigning variable threshold_angle");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "golf_angle_distance_2_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ sigma_angle;
      
      current_statement__ = 1;
      sigma_angle = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        sigma_angle = stan::math::lb_constrain(sigma_angle, 0, lp__);
      } else {
        current_statement__ = 1;
        sigma_angle = stan::math::lb_constrain(sigma_angle, 0);
      }
      local_scalar_t__ sigma_distance;
      
      current_statement__ = 2;
      sigma_distance = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma_distance = stan::math::lb_constrain(sigma_distance, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma_distance = stan::math::lb_constrain(sigma_distance, 0);
      }
      {
        current_statement__ = 4;
        validate_non_negative_index("p_angle", "J", J);
        Eigen::Matrix<local_scalar_t__, -1, 1> p_angle;
        p_angle = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
        
        current_statement__ = 4;
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 4;
          assign(p_angle, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable p_angle");}
        current_statement__ = 4;
        assign(p_angle, nil_index_list(),
          subtract(multiply(2, Phi(divide(threshold_angle, sigma_angle))), 1),
          "assigning variable p_angle");
        current_statement__ = 5;
        validate_non_negative_index("p_distance", "J", J);
        Eigen::Matrix<local_scalar_t__, -1, 1> p_distance;
        p_distance = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
        
        current_statement__ = 5;
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 5;
          assign(p_distance, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable p_distance");}
        current_statement__ = 5;
        assign(p_distance, nil_index_list(),
          subtract(
            Phi(
              elt_divide((distance_tolerance - overshot),
                multiply(add(x, overshot), sigma_distance))),
            Phi(
              elt_divide(-overshot,
                multiply(add(x, overshot), sigma_distance)))),
          "assigning variable p_distance");
        current_statement__ = 6;
        validate_non_negative_index("p", "J", J);
        Eigen::Matrix<local_scalar_t__, -1, 1> p;
        p = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
        
        current_statement__ = 6;
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 6;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            std::numeric_limits<double>::quiet_NaN(), "assigning variable p");
        }
        current_statement__ = 6;
        assign(p, nil_index_list(), elt_multiply(p_angle, p_distance),
          "assigning variable p");
        current_statement__ = 7;
        lp_accum__.add(binomial_log<propto__>(y, n, p));
        current_statement__ = 8;
        lp_accum__.add(
          normal_log<propto__>(stan::math::to_row_vector(
            stan::math::array_builder<local_scalar_t__>().add(sigma_angle)
            .add(sigma_distance).array()), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "golf_angle_distance_2_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double sigma_angle;
      
      current_statement__ = 1;
      sigma_angle = in__.scalar();
      current_statement__ = 1;
      sigma_angle = stan::math::lb_constrain(sigma_angle, 0);
      double sigma_distance;
      
      current_statement__ = 2;
      sigma_distance = in__.scalar();
      current_statement__ = 2;
      sigma_distance = stan::math::lb_constrain(sigma_distance, 0);
      vars__.push_back(sigma_angle);
      vars__.push_back(sigma_distance);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sigma_degrees;
      
      current_statement__ = 3;
      sigma_degrees = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_degrees = ((sigma_angle * 180) / stan::math::pi());
      vars__.push_back(sigma_degrees);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double sigma_angle;
      
      current_statement__ = 1;
      sigma_angle = context__.vals_r("sigma_angle")[(1 - 1)];
      current_statement__ = 1;
      sigma_angle = stan::math::lb_free(sigma_angle, 0);
      double sigma_distance;
      
      current_statement__ = 2;
      sigma_distance = context__.vals_r("sigma_distance")[(1 - 1)];
      current_statement__ = 2;
      sigma_distance = stan::math::lb_free(sigma_distance, 0);
      vars__.push_back(sigma_angle);
      vars__.push_back(sigma_distance);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("sigma_angle");
    names__.push_back("sigma_distance");
    names__.push_back("sigma_degrees");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "sigma_angle");
    param_names__.push_back(std::string() + "sigma_distance");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "sigma_degrees");
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "sigma_angle");
    param_names__.push_back(std::string() + "sigma_distance");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "sigma_degrees");
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sigma_angle\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_distance\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_degrees\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sigma_angle\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_distance\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_degrees\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef golf_angle_distance_2_model_namespace::golf_angle_distance_2_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


